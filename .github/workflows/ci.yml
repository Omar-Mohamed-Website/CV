# CI/CD Pipeline for CV Website
#
# Required GitHub Secrets for Vercel Deployment:
# - VERCEL_TOKEN: Your Vercel authentication token (get from https://vercel.com/account/tokens)
#
# To set up secrets:
# 1. Go to GitHub repository Settings > Secrets and variables > Actions
# 2. Add the VERCEL_TOKEN secret with your Vercel token value
# 3. Make sure your Vercel project is linked to this GitHub repository

name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  lint-and-test:
    name: Lint, Test & Build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type checking
        run: npm run type-check

      - name: Run linting
        run: npm run lint

      - name: Check code formatting
        run: npm run format:check

      - name: Run tests
        run: npm run test -- --run

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        if: matrix.node-version == '18.x'
        with:
          name: build-files
          path: |
            .next/
            public/
          retention-days: 1

  accessibility-test:
    name: Accessibility Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: npm start &

      - name: Wait for app to be ready
        run: npx wait-on http://localhost:3000

      - name: Run accessibility tests
        run: |
          npx @axe-core/cli http://localhost:3000 --exit

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=high || echo "Security audit found issues - review recommended"

      - name: Run dependency check
        run: |
          npm install -g better-npm-audit
          npx better-npm-audit audit
        continue-on-error: true

  lighthouse:
    name: Lighthouse Performance Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: npm start &

      - name: Wait for app to be ready
        run: npx wait-on http://localhost:3000

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x wait-on
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Vercel auth precheck
        run: vercel whoami || echo "Not logged in to Vercel"

      - name: Pull Vercel Environment Information
        id: pull
        run: vercel pull --yes --environment=preview
        continue-on-error: true

      - name: Skip note (no Vercel auth)
        if: steps.pull.outcome != 'success'
        run: |
          echo "Skipping preview deploy: Vercel auth/config not available (vercel pull failed)."

      - name: Build Project Artifacts
        if: steps.pull.outcome == 'success'
        run: vercel build

      - name: Deploy Preview to Vercel
        if: steps.pull.outcome == 'success'
        run: vercel deploy --prebuilt

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Vercel auth precheck
        run: vercel whoami || echo "Not logged in to Vercel"

      - name: Pull Vercel Environment Information
        id: pull
        run: vercel pull --yes --environment=production
        continue-on-error: true

      - name: Skip note (no Vercel auth)
        if: steps.pull.outcome != 'success'
        run: |
          echo "Skipping production deploy: Vercel auth/config not available (vercel pull failed)."

      - name: Build Project Artifacts
        if: steps.pull.outcome == 'success'
        run: vercel build --prod

      - name: Deploy Production to Vercel
        if: steps.pull.outcome == 'success'
        run: vercel deploy --prebuilt --prod
